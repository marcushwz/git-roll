#!/usr/bin/env bash

usage() {
	echo "usage: git roll init"
  echo "This will setup your repo to work with git-roll"
  echo "It will create a main branch if not present."
  echo "It will create a develop branch if not present."
  echo "It will ask for preferred feature branch prefix."
  echo "It will ask for preferred hotfix branch prefix."
  echo "It will ask for preferred release branch prefix."
}

cmd_help() {
	usage
  exit 0
}

setup_commit_template() {
cat <<EOF > ./.git/.gitmessage
# <type>[optional scope]: <description>
# Fixes PC-1234: Fix typo in user.rb
# Feature: Add shipping city to policy rule
######################## No more than 72 chars #########################
Title

# Body: Explain *what* and *why* (not *how*)
########################### Wrap at 72 chars ###########################
Body
EOF
  git config commit.template .git/.gitmessage
}

cmd_default() {
  local initialized=$(git config --get gitroll.initialized)
	if [ "$initialized" == "true" ]; then
    echo "git-roll is already initialized."
    echo "No further action taken."
		exit 0
	fi

  local answer

  # 1: Chek if inside git initialized directory
  INSIDE_WORK_TREE=$(git rev-parse --is-inside-work-tree)
  if [ "$INSIDE_WORK_TREE" != "true" ]; then
    echo "git-roll is only available for git initialized directory."
    echo "You can initialized it by running git init"
    echo "Aborting git-roll initialization..."
		exit 1
  fi

  # 2: Chek if origin remote is setup
  ORIGIN_URL=$(git config --get remote.origin.url)
  if [ -z "$ORIGIN_URL" ]; then
    echo "Aborting git-roll initialization..."
    echo "You must setup a remote origin first to use git-roll:"
    echo "      git remote add origin <your_origin_url>"
    echo "After that make your first commit (if you don't already have commits)."
    echo "Push your commit to the newly added remote by:"
    echo "      git push -u origin <your_current_branch>"
    echo "You should be able to run git roll init again withou any problem :)"
		exit 1
  fi

  # 3: Setting the master branch
  local master_branch
  printf "Branch name for production: "
  read answer
  master_branch="$answer"
  git config gitroll.branch.master "$master_branch"

  # 4: Setting the develop branch
  local develop_branch
  printf "Branch name for development: "
  read answer
  develop_branch="$answer"
  git config gitroll.branch.develop "$develop_branch"

  ## Creating/checking out to the develop branch
  if git show-ref --quiet refs/heads/$develop_branch; then
    git checkout -q "$develop_branch"
  else
    git branch --no-track "$develop_branch" "$master_branch"
    git checkout -q "$develop_branch"
  fi

  # 5: Ask for feature branch prefix
  printf "Prefix for Feature branches?: "
  read answer
  git config gitroll.prefix.feature "$answer"

  # 6: Ask for feature branch prefix
  printf "Prefix for Hotfix branches?: "
  read answer
  git config gitroll.prefix.hotfix "$answer"

  # 7: Ask for feature branch prefix
  printf "Prefix for Release branches?: "
  read answer
  git config gitroll.prefix.release "$answer"

  git config gitroll.initialized "true"

  # 8: Setting up git commit template
  setup_commit_template

  # 9: Set initialized flag to true
  git config gitroll.initialized "true"

  # 10: Push develop branch to remote
  git push -u origin "$develop_branch"
}
