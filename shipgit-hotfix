#!/usr/bin/env bash

usage() {
	echo "usage: shipgit hotfix [action] [-options]"
	echo "       shipgit hotfix start <branch_name>"
	echo "       shipgit hotfix finish (patch|minor|major)"
	echo "       shipgit hotfix end"
}

cmd_help() {
	usage
  exit 0
}

cmd_default() {
  usage
  exit 0
}

handle_main_merge_conflict() {
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	HOTFIX_BRANCH=$1

	echo "There are merge conflicts between $MAIN_BRANCH and $HOTFIX_BRANCH"
	echo "Please fix the conflicts yourself."
	echo "After that, add the changes and run:"
	echo "    git commit"
	echo "Finally, checkout to the hotfix and end it by:"
	echo "    shipgit hotfix end"
	exit 1
}

handle_no_tag() {
	echo "No tag to end the hotfix with"
	exit 1
}

cmd_start() {
	PREFIX=$(git config --get shipgit.prefix.hotfix)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)
	NAME=$3
	HOTFIX_BRANCH=$PREFIX$NAME

	echo "Checking out to $PRODUCTION_BRANCH..."
	git checkout -q "$PRODUCTION_BRANCH"

	echo "Updating local $PRODUCTION_BRANCH with remote..."
	git pull origin "$PRODUCTION_BRANCH"

  echo "Creating $HOTFIX_BRANCH base on $PRODUCTION_BRANCH..."
	git branch --no-track "$HOTFIX_BRANCH" "$PRODUCTION_BRANCH"

  echo "Checking out to $HOTFIX_BRANCH..."
	git checkout -q "$HOTFIX_BRANCH"

  echo "Pushing $HOTFIX_BRANCH to remote..."
	git push -u origin "$HOTFIX_BRANCH"
}

cmd_finish() {
	PREFIX=$(git config --get shipgit.prefix.hotfix)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	BUMP_TYPE=$3
	SEMANTIC_VERSION_PREFIX=$(git config --get shipgit.prefix.semantic)
	HOTFIX_BRANCH=$(git branch --show-current)

	if ! [[ "$HOTFIX_BRANCH" =~ ^$PREFIX.* ]]; then
		echo "You are not in a hotfix branch."
		echo "shipgit hotfix finish must be called in a hotfix branch."
		exit 1
	fi

	# Fallback to prefix0.0.0 if no latest tag found
	LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "${SEMANTIC_VERSION_PREFIX}0.0.0")
	if [ "$SEMANTIC_VERSION_PREFIX" != "" ]; then
		LATEST_TAG_WITHOUT_PREFIX=$(echo $LATEST_TAG | sed "s/${SEMANTIC_VERSION_PREFIX}//")
	else
		LATEST_TAG_WITHOUT_PREFIX=$LATEST_TAG
	fi

	if [ "$BUMP_TYPE" == "patch" ]; then
		NEW_TAG=$(echo $LATEST_TAG_WITHOUT_PREFIX | awk -F. '{OFS="."; $3+=1; print $0}')
	elif [ "$BUMP_TYPE" == "minor" ]; then
		NEW_TAG=$(echo $LATEST_TAG_WITHOUT_PREFIX | awk -F. '{OFS="."; $2+=1; $3=0; print $0}')
	elif [ "$BUMP_TYPE" == "major" ]; then
		NEW_TAG=$(echo $LATEST_TAG_WITHOUT_PREFIX | awk -F. '{OFS="."; $1+=1; $2=0; $3=0; print $0}')
	else
		echo "Please specify the semantic version bump type"
		echo "Usage: shipgit hotfix finish (patch|minor|major)"
		exit 1
	fi

	NEW_TAG_WITH_PREFIX=$(echo "${SEMANTIC_VERSION_PREFIX}${NEW_TAG}")

	if [ "$NEW_TAG_WITH_PREFIX" != "$LATEST_TAG" ]; then
		echo "Previous version: "$LATEST_TAG"..."
		echo "Performing "$BUMP_TYPE" version bump..."
		echo "Creating new tag: "$NEW_TAG_WITH_PREFIX"..."
		git tag "$NEW_TAG_WITH_PREFIX"
	fi

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"

  echo "Updating local $MAIN_BRANCH with remote..."
	git pull origin $MAIN_BRANCH

  echo "Merging $HOTFIX_BRANCH into $MAIN_BRANCH..."
	git merge --log --no-ff "$HOTFIX_BRANCH" || handle_main_merge_conflict "$HOTFIX_BRANCH"

  echo "Pushing tag "$NEW_TAG_WITH_PREFIX" to remote..."
  git push origin "$NEW_TAG_WITH_PREFIX"

  echo "Pushing "$MAIN_BRANCH" to remote..."
	git push origin "$MAIN_BRANCH"

  echo "Checking out to $PRODUCTION_BRANCH..."
	git checkout -q "$PRODUCTION_BRANCH"

  echo "Updating local $PRODUCTION_BRANCH with remote..."
	git pull origin $PRODUCTION_BRANCH

  echo "Merging $NEW_TAG_WITH_PREFIX into $PRODUCTION_BRANCH..."
	git merge --ff-only "$NEW_TAG_WITH_PREFIX"

  echo "Pushing "$PRODUCTION_BRANCH" to remote..."
	git push origin "$PRODUCTION_BRANCH"

  echo "Cleaning up $HOTFIX_BRANCH..."
	git branch -D "$HOTFIX_BRANCH"
	git push -d origin "$HOTFIX_BRANCH"

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"
}

cmd_end() {
	PREFIX=$(git config --get shipgit.prefix.hotfix)
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)
	SEMANTIC_VERSION_PREFIX=$(git config --get shipgit.prefix.semantic)
	HOTFIX_BRANCH=$(git branch --show-current)

	if ! [[ "$HOTFIX_BRANCH" =~ ^$PREFIX.* ]]; then
		echo "You are not in a hotfix branch."
		echo "shipgit hotfix end must be called in a hotfix branch."
		exit 1
	fi

	# If it hits here a tag should already be created
	LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || handle_no_tag)

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"

  echo "Pushing tag "$LATEST_TAG" to remote..."
  git push origin "$LATEST_TAG"

  echo "Pushing "$MAIN_BRANCH" to remote..."
	git push origin "$MAIN_BRANCH"

  echo "Checking out to $PRODUCTION_BRANCH..."
	git checkout -q "$PRODUCTION_BRANCH"

  echo "Updating local $PRODUCTION_BRANCH with remote..."
	git pull origin $PRODUCTION_BRANCH

  echo "Merging $LATEST_TAG into $PRODUCTION_BRANCH..."
	git merge --ff-only "$LATEST_TAG"

  echo "Pushing "$PRODUCTION_BRANCH" to remote..."
	git push origin "$PRODUCTION_BRANCH"

  echo "Cleaning up $HOTFIX_BRANCH..."
	git branch -D "$HOTFIX_BRANCH"
	git push -d origin "$HOTFIX_BRANCH"

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"
}
