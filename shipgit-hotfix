#!/usr/bin/env bash

usage() {
	echo "usage: shipgit hotfix [action] [-options]"
	echo "       shipgit hotfix start <version>"
	echo "       shipgit hotfix finish <version>"
	echo "       shipgit hotfix end <version>"
}

cmd_help() {
	usage
  exit 0
}

cmd_default() {
  usage
  exit 0
}

handle_main_merge_conflict() {
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	HOTFIX_BRANCH=$1

	echo "There are merge conflicts between $MAIN_BRANCH and $HOTFIX_BRANCH"
	echo "Please fix the conflicts yourself."
	echo "After that, add the changes and run:"
	echo "    git commit"
	echo "Finally, you can finish it by:"
	echo "    shipgit hotfix end <version>"
	exit 1
}

handle_branch_not_exist() {
	BRANCH=$1

	echo "Branch $BRANCH does not exisit."
	exit 1
}

cmd_start() {
	PREFIX=$(git config --get shipgit.prefix.hotfix)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)
	TAGNAME=$3
	HOTFIX_BRANCH=$PREFIX$TAGNAME

	if [ "$TAGNAME" == "" ]; then
		echo "No version is given."
		echo "Usage: shipgit hotfix start <version>"
		exit 1
	fi

	echo "Checking out to $PRODUCTION_BRANCH..."
	git checkout -q "$PRODUCTION_BRANCH"

	echo "Updating local $PRODUCTION_BRANCH with remote..."
	git pull origin "$PRODUCTION_BRANCH"

  echo "Creating $HOTFIX_BRANCH base on $PRODUCTION_BRANCH..."
	git branch --no-track "$HOTFIX_BRANCH" "$PRODUCTION_BRANCH"

  echo "Checking out to $HOTFIX_BRANCH..."
	git checkout -q "$HOTFIX_BRANCH"

  echo "Pushing $HOTFIX_BRANCH to remote..."
	git push -u origin "$HOTFIX_BRANCH"
}

cmd_finish() {
	PREFIX=$(git config --get shipgit.prefix.hotfix)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	TAGNAME=$3
	HOTFIX_BRANCH=$PREFIX$TAGNAME

	if [ "$TAGNAME" == "" ]; then
		echo "No version is given."
		echo "Usage: shipgit hotfix finish <version>"
		exit 1
	fi

  echo "Checking out to $HOTFIX_BRANCH..."
	git checkout -q "$HOTFIX_BRANCH" || handle_branch_not_exist "$HOTFIX_BRANCH"

	# Don't show error
	LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null) 

	if [ "$LATEST_TAG" != "$TAGNAME" ]; then
		echo "Creating new tag: "$TAGNAME"..."
		git tag "$TAGNAME"
	fi

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"

  echo "Updating local $MAIN_BRANCH with remote..."
	git pull origin $MAIN_BRANCH

  echo "Merging $HOTFIX_BRANCH into $MAIN_BRANCH..."
	git merge --log --no-ff "$HOTFIX_BRANCH" || handle_main_merge_conflict "$HOTFIX_BRANCH"

  echo "Pushing tag "$TAGNAME" to remote..."
  git push origin "$TAGNAME"

  echo "Pushing "$MAIN_BRANCH" to remote..."
	git push origin "$MAIN_BRANCH"

  echo "Checking out to $PRODUCTION_BRANCH..."
	git checkout -q "$PRODUCTION_BRANCH"

  echo "Updating local $PRODUCTION_BRANCH with remote..."
	git pull origin $PRODUCTION_BRANCH

  echo "Merging $TAGNAME into $PRODUCTION_BRANCH..."
	git merge --ff-only "$TAGNAME"

  echo "Pushing "$PRODUCTION_BRANCH" to remote..."
	git push origin "$PRODUCTION_BRANCH"

  echo "Cleaning up $HOTFIX_BRANCH..."
	git branch -D "$HOTFIX_BRANCH"
	git push -d origin "$HOTFIX_BRANCH"

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"
}

cmd_end() {
	PREFIX=$(git config --get shipgit.prefix.hotfix)
	TAGNAME=$3
	HOTFIX_BRANCH=$PREFIX$TAGNAME
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)

	if [ "$TAGNAME" == "" ]; then
		echo "No version is given."
		echo "Usage: shipgit hotfix end <version>"
		exit 1
	fi

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"

  echo "Pushing tag "$TAGNAME" to remote..."
  git push origin "$TAGNAME"

  echo "Pushing "$MAIN_BRANCH" to remote..."
	git push origin "$MAIN_BRANCH"

  echo "Checking out to $PRODUCTION_BRANCH..."
	git checkout -q "$PRODUCTION_BRANCH"

  echo "Updating local $PRODUCTION_BRANCH with remote..."
	git pull origin $PRODUCTION_BRANCH

  echo "Merging $TAGNAME into $PRODUCTION_BRANCH..."
	git merge --ff-only "$TAGNAME"

  echo "Pushing "$PRODUCTION_BRANCH" to remote..."
	git push origin "$PRODUCTION_BRANCH"

  echo "Cleaning up $HOTFIX_BRANCH..."
	git branch -D "$HOTFIX_BRANCH"
	git push -d origin "$HOTFIX_BRANCH"

  echo "Checking out to $MAIN_BRANCH..."
	git checkout -q "$MAIN_BRANCH"
}
