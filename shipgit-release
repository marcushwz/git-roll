#!/usr/bin/env bash

usage() {
	echo "usage: shipgit release [action] [-options]"
	echo "       shipgit release start <release_name>"
	echo "       shipgit release finish (patch|minor|major)"
	echo "       shipgit release sync"
}

cmd_help() {
	usage
  exit 0
}

cmd_default() {
  usage
  exit 0
}

handle_not_in_release_branch() {
	ACTION = $1

	echo "+++++++++++++++++++++++ ATTENTION +++++++++++++++++++++++"
	echo ""
	echo "You are not in a release branch."
	echo "shipgit release $ACTION must be called in a release branch."
	echo ""
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	exit 1
}

handle_release_finish_conflict() {
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	RELEASE_BRANCH=$1
	BUMP_TYPE=$2

	echo "++++++++++++++++++++++++++ REBASE CONFLICT +++++++++++++++++++++++++++"
	echo ""
	echo "There are conflicts between $RELEASE_BRANCH and $MAIN_BRANCH"
	echo ""
	echo "Please fix the conflicts and when you are done, run:"
	echo "      $ git rebase --continue"
	echo ""
	echo "After that run:"
	echo "      $ shipgit release finish $BUMP_TYPE"
	echo ""
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	exit 1
}

handle_release_sync_conflict() {
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	RELEASE_BRANCH=$1

	echo "++++++++++++++++++++++++++ REBASE CONFLICT +++++++++++++++++++++++++++"
	echo ""
	echo "There are conflicts between $RELEASE_BRANCH and $MAIN_BRANCH"
	echo ""
	echo "Please fix the conflicts and when you are done, run:"
	echo "      $ git rebase --continue"
	echo ""
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	exit 1
}

cmd_start() {
	PREFIX=$(git config --get shipgit.prefix.release)
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	NAME=$3
	COMMIT_SHA=$4
	RELEASE_BRANCH=$PREFIX$NAME

	echo "======================= Starting release branch ======================="
	echo ""
	echo "Steps:"

	git checkout -q "$MAIN_BRANCH" &> /dev/null
	git pull origin "$MAIN_BRANCH" &> /dev/null
	git fetch --tags &> /dev/null
	echo "    1. Pulled latest changes from remote $MAIN_BRANCH."

	git branch --no-track "$RELEASE_BRANCH" "$MAIN_BRANCH" &> /dev/null
	echo "    2. Created new $RELEASE_BRANCH branch based on $MAIN_BRANCH."

	git checkout -q "$RELEASE_BRANCH" &> /dev/null
	git push -u origin "$RELEASE_BRANCH" &> /dev/null
	echo "    3. Pushed $RELEASE_BRANCH to remote and added upstream reference."
	echo ""
	echo "======================================================================="
}

cmd_sync() {
	PREFIX=$(git config --get shipgit.prefix.release)
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	RELEASE_BRANCH=$(git branch --show-current)

	if ! [[ "$RELEASE_BRANCH" =~ ^$PREFIX.* ]]; then
		handle_not_in_release_branch "sync"
	fi

	echo "======================= Syncing release branch ======================="
	echo ""
	echo "Steps:"

	git checkout -q "$MAIN_BRANCH" &> /dev/null
	git pull origin $MAIN_BRANCH &> /dev/null
	git fetch --tags &> /dev/null
	echo "    1. Pulled latest changes from $MAIN_BRANCH."

	git checkout -q "$RELEASE_BRANCH" &> /dev/null
	git rebase "$MAIN_BRANCH" &> /dev/null || handle_release_sync_conflict "$RELEASE_BRANCH"
	echo "    2. Rebased $RELEASE_BRANCH with $MAIN_BRANCH."
	echo ""
	echo "======================================================================"
}

cmd_finish() {
	PREFIX=$(git config --get shipgit.prefix.release)
	MAIN_BRANCH=$(git config --get shipgit.branch.main)
	PRODUCTION_BRANCH=$(git config --get shipgit.branch.production)
	BUMP_TYPE=$3
	RELEASE_BRANCH=$(git branch --show-current)
	SEMANTIC_VERSION_PREFIX=$(git config --get shipgit.prefix.semantic)

	if ! [[ "$RELEASE_BRANCH" =~ ^$PREFIX.* ]]; then
		handle_not_in_release_branch "finish"
	fi

	if ! [[ "$BUMP_TYPE" =~ (patch|minor|major) ]]; then
		echo "++++++++++++++++++ ATTENTION ++++++++++++++++++"
		echo ""
		echo "Please specify the semantic version bump type."
		echo "Usage:"
		echo "    shipgit release finish (patch|minor|major)"
		echo ""
		echo "+++++++++++++++++++++++++++++++++++++++++++++++"
		exit 1
	fi

	echo "=========================== Finishing release branch ==========================="
	echo ""
	echo "Steps:"

	git checkout -q "$MAIN_BRANCH" &> /dev/null
	git pull origin $MAIN_BRANCH &> /dev/null
	git fetch --tags &> /dev/null
	echo "    1. Pulled latest changes from remote $MAIN_BRANCH."

	git checkout -q "$RELEASE_BRANCH" &> /dev/null
	git rebase "$MAIN_BRANCH" &> /dev/null || handle_release_finish_conflict "$RELEASE_BRANCH" "$BUMP_TYPE"
	echo "    2. Rebased $FEATURE_BRANCH with $MAIN_BRANCH."

	# Fallback to prefix0.0.0 if no latest tag found
	LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "${SEMANTIC_VERSION_PREFIX}0.0.0")
	if [ "$SEMANTIC_VERSION_PREFIX" != "" ]; then
		LATEST_TAG_WITHOUT_PREFIX=$(echo $LATEST_TAG | sed "s/${SEMANTIC_VERSION_PREFIX}//")
	else
		LATEST_TAG_WITHOUT_PREFIX=$LATEST_TAG
	fi

	if [ "$BUMP_TYPE" == "patch" ]; then
		NEW_TAG=$(echo $LATEST_TAG_WITHOUT_PREFIX | awk -F. '{OFS="."; $3+=1; print $0}')
	elif [ "$BUMP_TYPE" == "minor" ]; then
		NEW_TAG=$(echo $LATEST_TAG_WITHOUT_PREFIX | awk -F. '{OFS="."; $2+=1; $3=0; print $0}')
	elif [ "$BUMP_TYPE" == "major" ]; then
		NEW_TAG=$(echo $LATEST_TAG_WITHOUT_PREFIX | awk -F. '{OFS="."; $1+=1; $2=0; $3=0; print $0}')
	fi

	NEW_TAG_WITH_PREFIX=$(echo "${SEMANTIC_VERSION_PREFIX}${NEW_TAG}")

	if [ "$NEW_TAG_WITH_PREFIX" != "$LATEST_TAG" ]; then
		git tag -a "$NEW_TAG_WITH_PREFIX" -m "RELEASE: $NEW_TAG_WITH_PREFIX" &> /dev/null
	fi
	echo "    3. Added annotated tag $NEW_TAG_WITH_PREFIX."

	git checkout -q "$MAIN_BRANCH" &> /dev/null
	git merge --log --ff-only "$RELEASE_BRANCH" &> /dev/null
	echo "    4. Merged $RELEASE_BRANCH into $MAIN_BRANCH."

  git push origin "$NEW_TAG_WITH_PREFIX" &> /dev/null
	git push origin "$MAIN_BRANCH" &> /dev/null
	echo "    5. Pushed tag $NEW_TAG_WITH_PREFIX and $MAIN_BRANCH to remote."

	git checkout -q "$PRODUCTION_BRANCH" &> /dev/null
	git pull origin $PRODUCTION_BRANCH &> /dev/null
	git merge --ff-only "$NEW_TAG_WITH_PREFIX" &> /dev/null
	echo "    6. Merged annotated tag $NEW_TAG_WITH_PREFIX into $PRODUCTION_BRANCH."

	git push origin "$PRODUCTION_BRANCH" &> /dev/null
	echo "    7. Pushed $PRODUCTION_BRANCH to remote."

	git branch -D "$RELEASE_BRANCH" &> /dev/null
	git push -d origin "$RELEASE_BRANCH" &> /dev/null
	echo "    8. Deleted $RELEASE_BRANCH locally and remotely."

	git checkout -q "$MAIN_BRANCH" &> /dev/null
	echo ""
	echo "Summary:"
	echo "    1. Version has been bumped from $LATEST_TAG to $NEW_TAG_WITH_PREFIX"
	echo ""
	echo "==============================================================================="
}
